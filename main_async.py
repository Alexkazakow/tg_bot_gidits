import random
import asyncio
import sqlite3
import numpy as np 
from telebot.async_telebot import AsyncTeleBot
from telebot import types

bot = AsyncTeleBot('TOKEN')
digit, number = 0, 0
dct = {'0': '0‚É£', '1': '1‚É£', '2': '2‚É£', '3': '3‚É£', '4':'4‚É£', '5':'5‚É£', '6':'6‚É£', '7':'7‚É£', '8':'8‚É£', '9':'9‚É£'}

conn = sqlite3.connect('rating.db', check_same_thread=False)
cursor = conn.cursor()

def add_decision(username: str, digit: int, number: int, decision: str, cnt_number: int, rating: int):
    cursor.execute('INSERT INTO rating (username, digit, number, decision, cnt_number, rating) VALUES (?, ?, ?, ?, ?, ?)', (username, digit, number, decision, cnt_number, rating))
    conn.commit()

def select_my_rating(username):
    cursor.execute('SELECT CASE WHEN EXISTS(SELECT * FROM rating WHERE username = ?) = 0 THEN 0 ELSE SUM(rating) END FROM rating WHERE username = ?', (username, username))
    return cursor.fetchall()[0][0]

def all_record(digit, number):
    cursor.execute('SELECT CASE WHEN EXISTS(SELECT * FROM rating WHERE digit = ? and number = ?) = 0 THEN 0 ELSE MIN(cnt_number) END FROM rating WHERE digit = ? and number = ?', (digit, number, digit, number))
    return cursor.fetchall()[0][0]

@bot.message_handler(commands=['start'])
async def game(message):
    global digit, number
    digit = random.randint(1,9)
    number = random.randint(10,20)
    # str_digit = dct[str(digit)]
    # str_number = ''.join([dct[i] for i in list(str(number))])
    await bot.send_message(message.from_user.id, f'–°–æ—Å—Ç–∞–≤—å—Ç–µ —á–∏—Å–ª–æ {number} –∏–∑ —Ü–∏—Ñ—Ä—ã {digit}')


@bot.message_handler(commands=['help'])
async def help(message):
    await bot.send_message(message.from_user.id, f'–ó–ê–î–ê–ß–ê: \n–°–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ü–∏—Ñ—Ä —Å–ª–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ \n \n–ü–†–ò–ú–ï–†:\n–°–æ—Å—Ç–∞–≤—å—Ç–µ —á–∏—Å–ª–æ 120 –∏–∑ —Ü–∏—Ñ—Ä—ã 9 \n \n–†–ï–®–ï–ù–ò–ï: 9 + 999/9 = 120 \n \n–†–ê–ó–†–ï–®–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: \n + —Å–ª–æ–∂–µ–Ω–∏–µ    ‚Äì –≤—ã—á–∏—Ç–∞–Ω–∏–µ \n* —É–º–Ω–æ–∂–µ–Ω–∏–µ   / –¥–µ–ª–µ–Ω–∏–µ \n() —Å–∫–æ–±–∫–∏          ^ —Å—Ç–µ–ø–µ–Ω—å \n ! —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª')


@bot.message_handler(commands=['rating'])
async def rating(message):
    my_rating = select_my_rating(message.from_user.username) 
    await bot.send_message(message.from_user.id, f'@{message.from_user.username}: {my_rating}')


@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    global digit, number
    with open('logs.txt', 'a') as the_file:
        the_file.write(f'{message.text}\n')
    try:
        res = eval(message.text.replace('^', '**'))
        print(res)
        lst = list(message.text)
    except:
        res = '–æ—à–∏–±–∫–∞'
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.send_message(message.from_user.id, f'{message.text} = {res}')
    if res % 1 == 0 and res == number and sum([x.isdigit() for x in lst]) == lst.count(str(digit)):
        add_decision(username=message.from_user.username, digit=digit, number=number, decision=message.text, cnt_number=lst.count(str(digit)), rating=(1/np.log(lst.count(str(digit)))))
        my_rating = select_my_rating(message.from_user.username)
        record = all_record(digit, number)
        await bot.send_message(message.from_user.id, f'–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üëç \n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {lst.count(str(digit))} —Ü–∏—Ñ—Ä \n–†–µ–∫–æ—Ä–¥: {record} —Ü–∏—Ñ—Ä\n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {round(my_rating, 2)}') #\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {round(1/np.log(lst.count(str(digit))), 2)} –æ—á–∫–æ–≤ 
        


asyncio.run(bot.polling())
